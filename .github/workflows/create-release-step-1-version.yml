name: 'Create Release Step 1: Version'
description: 'Create a new release version and branch. Select the branch you want to base the release on.'

run-name: "Create Release: ${{ github.event.inputs.version != '' && github.event.inputs.version || 'Auto-increment' }}"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 3.29.0 or 3.29.0-test) - leave blank for auto-increment'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
      release_url: ${{ steps.create-release.outputs.url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: determine-version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            INPUT_VERSION="${{ github.event.inputs.version }}"
            INPUT_VERSION=${INPUT_VERSION#v}
            VERSION="v${INPUT_VERSION}"
            
            # Basic validation: check if version contains dots and numbers
            if [[ ! "$INPUT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
              echo "Error: Invalid version format. Expected format: X.Y.Z or X.Y.Z-suffix"
              echo "Examples: 3.29.0, 3.29.0-test, 3.29.0-rc1"
              echo "Received: $INPUT_VERSION"
              exit 1
            fi
          else
            LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n 1)
            
            if [ -z "$LATEST_TAG" ]; then
              VERSION="v1.0.0"
            else
              VERSION_WITHOUT_V=${LATEST_TAG#v}
              IFS='.' read -ra VERSION_PARTS <<< "$VERSION_WITHOUT_V"
              
              MAJOR=${VERSION_PARTS[0]}
              MINOR=${VERSION_PARTS[1]}
              NEW_MINOR=$((MINOR + 1))
              VERSION="v${MAJOR}.${NEW_MINOR}.0"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ steps.determine-version.outputs.version }}"
          PREVIOUS_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n 2 | head -n 1)
          
          if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" == "$VERSION" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          cat > release_notes.md << EOF
          ## 🔧 Release Information
          - **Version**: $VERSION
          - **Created by**: @${{ github.actor }}
          - **Release Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## 🎯 What's Changed
          EOF
          
          COMMIT_COUNT=$(git rev-list --count ${PREVIOUS_TAG}..HEAD)
          echo "**${COMMIT_COUNT} commits** since ${PREVIOUS_TAG}" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### ✨ Features" >> release_notes.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --grep="^feat" >> release_notes.md || echo "* No new features" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🐛 Bug Fixes" >> release_notes.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --grep="^fix" >> release_notes.md || echo "* No bug fixes" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🔧 Other Changes" >> release_notes.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --grep -v "^feat" --grep -v "^fix" | head -10 >> release_notes.md || echo "* No other changes" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "**Full Changelog**: [$PREVIOUS_TAG...$VERSION](${{ github.server_url }}/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION})" >> release_notes.md
          echo "" >> release_notes.md
          
          cat >> release_notes.md << EOF
          ---
          *This release was automatically generated by GitHub Actions*
          EOF
      
      - name: Create release branch
        id: create-branch
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: 'refs/heads/release/${{ steps.determine-version.outputs.version }}'
          sha: '${{ github.sha }}'
      
      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine-version.outputs.version }}
          name: ${{ steps.determine-version.outputs.version }}
          body_path: release_notes.md
          target_commitish: release/${{ steps.determine-version.outputs.version }}
          draft: false
          prerelease: false
      
      - name: Create job summary
        run: |
          VERSION="${{ steps.determine-version.outputs.version }}"
          BRANCH_NAME="release/${VERSION}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # Release Created: $VERSION
          
          | Field | Value |
          |-------|-------|
          | **Version** | \`$VERSION\` |
          | **Type** | ${{ github.event.inputs.version != '' && 'Manual' || 'Auto-increment' }} |
          | **Release Branch** | [\`$BRANCH_NAME\`](${{ github.server_url }}/${{ github.repository }}/tree/$BRANCH_NAME) |
          | **Release Notes** | [View Release](${{ steps.create-release.outputs.url }}) |
          
          ## Next Steps
          
          [Build Apps](${{ github.server_url }}/${{ github.repository }}/actions/workflows/create-release-step-2-apps.yml) → Select branch: **$BRANCH_NAME**
          EOF
