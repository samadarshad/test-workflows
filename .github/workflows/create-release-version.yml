name: Create Release Version

run-name: "Create Release: ${{ github.event.inputs.version_mode == 'manual' && github.event.inputs.manual_version || 'Auto-increment' }}"

on:
  workflow_dispatch:
    inputs:
      version_mode:
        description: 'Version mode'
        required: true
        type: choice
        options:
          - automatic
          - manual
        default: automatic
      
      manual_version:
        description: 'Manual version override (e.g., 3.29.0 or 3.29.0-test)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
      release_url: ${{ steps.create-release.outputs.html_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: determine-version
        run: |
          if [ "${{ github.event.inputs.version_mode }}" == "manual" ]; then
            INPUT_VERSION="${{ github.event.inputs.manual_version }}"
            INPUT_VERSION=${INPUT_VERSION#v}
            VERSION="v${INPUT_VERSION}"
            
            if ! echo "$INPUT_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\-]+)*$' > /dev/null; then
              echo "Error: Invalid version format. Expected format: X.Y.Z or X.Y.Z-suffix"
              exit 1
            fi
            
            LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n 1)
          else
            LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n 1)
            
            if [ -z "$LATEST_TAG" ]; then
              VERSION="v1.0.0"
            else
              VERSION_WITHOUT_V=${LATEST_TAG#v}
              IFS='.' read -ra VERSION_PARTS <<< "$VERSION_WITHOUT_V"
              
              MAJOR=${VERSION_PARTS[0]}
              MINOR=${VERSION_PARTS[1]}
              NEW_MINOR=$((MINOR + 1))
              VERSION="v${MAJOR}.${NEW_MINOR}.0"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ steps.determine-version.outputs.version }}"
          PREVIOUS_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n 2 | head -n 1)
          
          if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" == "$VERSION" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          cat > release_notes.md << EOF
          ## 🔧 Release Information
          - **Version**: $VERSION
          - **Created by**: @${{ github.actor }}
          - **Release Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## 🎯 What's Changed
          EOF
          
          COMMIT_COUNT=$(git rev-list --count ${PREVIOUS_TAG}..HEAD)
          echo "**${COMMIT_COUNT} commits** since ${PREVIOUS_TAG}" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### ✨ Features" >> release_notes.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --grep="^feat" >> release_notes.md || echo "* No new features" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🐛 Bug Fixes" >> release_notes.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --grep="^fix" >> release_notes.md || echo "* No bug fixes" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "### 🔧 Other Changes" >> release_notes.md
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --grep -v "^feat" --grep -v "^fix" | head -10 >> release_notes.md || echo "* No other changes" >> release_notes.md
          echo "" >> release_notes.md
          
          echo "**Full Changelog**: [$PREVIOUS_TAG...$VERSION](${{ github.server_url }}/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION})" >> release_notes.md
          echo "" >> release_notes.md
          
          cat >> release_notes.md << EOF
          ## 📦 Build Status
          ⏳ **Apps not yet built** - Use the [Build Apps workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/build-apps.yml) to build apps for this release.
          
          ---
          *This release was automatically generated by GitHub Actions*
          EOF
      
      - name: Create release branch
        id: create-branch
        run: |
          VERSION="${{ steps.determine-version.outputs.version }}"
          SOURCE_BRANCH="${{ github.ref_name }}"
          BRANCH_NAME="release/${VERSION}"
          
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            git checkout "$SOURCE_BRANCH"
            git checkout -b "$BRANCH_NAME"
            git push origin "$BRANCH_NAME"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.branch_name }}"
          
          gh release create "${{ steps.determine-version.outputs.version }}" \
            --title "${{ steps.determine-version.outputs.version }}" \
            --notes-file release_notes.md \
            --target "$BRANCH_NAME"
          
          RELEASE_URL=$(gh release view "${{ steps.determine-version.outputs.version }}" --json url -q .url)
          echo "html_url=$RELEASE_URL" >> $GITHUB_OUTPUT
      
      - name: Create job summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          # Release Created: ${{ steps.determine-version.outputs.version }}
          
          | Field | Value |
          |-------|-------|
          | **Version** | \`${{ steps.determine-version.outputs.version }}\` |
          | **Type** | ${{ github.event.inputs.version_mode }} |
          | **Release Branch** | \`${{ steps.create-branch.outputs.branch_name }}\` |
          | **Release URL** | [View Release](${{ steps.create-release.outputs.html_url }}) |
          
          ## Next Steps
          
          [Build Apps](${{ github.server_url }}/${{ github.repository }}/actions/workflows/build-apps.yml) → Select version: **${{ steps.determine-version.outputs.version }}**
          EOF
          - Create patch releases from this branch
          
          ---
          *Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")*
          EOF