name: Build Apps

run-name: "Build Apps: ${{ github.event.inputs.version_source == 'latest' && 'Latest Release' || github.event.inputs.manual_version }} - ${{ github.event.inputs.app_selection == 'all' && 'All apps' || github.event.inputs.specific_app }}"

on:
  workflow_dispatch:
    inputs:
      version_source:
        description: 'Version source'
        required: true
        type: choice
        options:
          - latest
          - manual
        default: latest
      
      manual_version:
        description: 'Manual version (e.g., v3.28.0) - only used if version_source is "manual"'
        required: false
        type: string
      
      app_selection:
        description: 'Apps to build'
        required: true
        type: choice
        options:
          - all
          - specific
        default: all
      
      specific_app:
        description: 'Specific app name (only used if app_selection is "specific")'
        required: false
        type: choice
        options:
          - ev.energy
          - NGMA
          - NGNY
          - SVCE
          - MCE
          - ANWB
        default: ev.energy

jobs:
  determine-build-parameters:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
      apps: ${{ steps.determine-apps.outputs.apps }}
      release_exists: ${{ steps.check-release.outputs.exists }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version to build
        id: determine-version
        run: |
          if [ "${{ github.event.inputs.version_source }}" == "latest" ]; then
            # Get the latest release tag
            VERSION=$(gh release list --limit 1 --json tagName -q '.[0].tagName')
            
            if [ -z "$VERSION" ]; then
              echo "Error: No releases found. Please create a release first using the 'Create Release Version' workflow."
              exit 1
            fi
            
            echo "Using latest release: $VERSION"
          else
            # Use manual version
            VERSION="${{ github.event.inputs.manual_version }}"
            
            # Validate format
            if ! echo "$VERSION" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
              echo "Error: Invalid version format. Expected format: vX.Y.Z (e.g., v3.28.0)"
              exit 1
            fi
            
            echo "Using manual version: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Display version banner
          echo ""
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
          echo "‚ïë     BUILD VERSION: $VERSION           "
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
          echo ""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if release exists
        id: check-release
        run: |
          VERSION="${{ steps.determine-version.outputs.version }}"
          
          # Check if the release exists
          if gh release view "$VERSION" > /dev/null 2>&1; then
            echo "‚úÖ Release $VERSION exists"
            echo "exists=true" >> $GITHUB_OUTPUT
            
            # Get release URL for reference
            RELEASE_URL=$(gh release view "$VERSION" --json url -q .url)
            echo "Release URL: $RELEASE_URL"
          else
            echo "‚ö†Ô∏è Warning: Release $VERSION does not exist yet"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine apps to build
        id: determine-apps
        run: |
          if [ "${{ github.event.inputs.app_selection }}" == "all" ]; then
            APPS='["ev.energy", "NGMA", "NGNY", "SVCE", "MCE", "ANWB"]'
            echo "Building all apps"
          else
            APPS='["${{ github.event.inputs.specific_app }}"]'
            echo "Building specific app: ${{ github.event.inputs.specific_app }}"
          fi
          
          echo "apps=$APPS" >> $GITHUB_OUTPUT
      
      - name: Display build information
        run: |
          echo "========================================="
          echo "üì¶ BUILD CONFIGURATION"
          echo "========================================="
          echo "Version: ${{ steps.determine-version.outputs.version }}"
          echo "Release Exists: ${{ steps.check-release.outputs.exists }}"
          echo "Apps to build: ${{ steps.determine-apps.outputs.apps }}"
          echo "========================================="
          
          # Parse and display apps in a readable format
          APPS='${{ steps.determine-apps.outputs.apps }}'
          echo ""
          echo "Apps list:"
          echo "$APPS" | jq -r '.[]' | while read app; do
            echo "  - $app"
          done
          echo ""
          echo "========================================="
  
  build-apps:
    needs: determine-build-parameters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.determine-build-parameters.outputs.apps) }}
        platform: [android, ios]
        environment: [staging, production]
    
    steps:
      - name: Prepare build configuration
        id: build-config
        run: |
          # Convert app name to lowercase and remove dots for workflow name
          APP_NAME="${{ matrix.app }}"
          APP_NAME_LOWER=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]')
          APP_NAME_CLEAN=$(echo "$APP_NAME_LOWER" | tr -d '.')
          
          # Construct workflow name
          WORKFLOW_NAME="${APP_NAME_CLEAN}-${{ matrix.platform }}-${{ matrix.environment }}"
          
          # Release branch name
          BRANCH_NAME="release/${{ needs.determine-build-parameters.outputs.version }}"
          
          echo "app_name_clean=$APP_NAME_CLEAN" >> $GITHUB_OUTPUT
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          echo "üì± Build Configuration:"
          echo "  App: ${{ matrix.app }}"
          echo "  Platform: ${{ matrix.platform }}"
          echo "  Environment: ${{ matrix.environment }}"
          echo "  Workflow: $WORKFLOW_NAME"
          echo "  Branch: $BRANCH_NAME"
          echo "  Version: ${{ needs.determine-build-parameters.outputs.version }}"
      
      - name: Trigger Bitrise build
        id: trigger-bitrise
        env:
          BITRISE_APP_ID: ${{ secrets.BITRISE_PROJECT_SLUG }}
          BITRISE_ACCESS_TOKEN: ${{ secrets.BITRISE_ACCESS_TOKEN }}
        run: |
          WORKFLOW_NAME="${{ steps.build-config.outputs.workflow_name }}"
          BRANCH_NAME="${{ steps.build-config.outputs.branch_name }}"
          VERSION="${{ needs.determine-build-parameters.outputs.version }}"
          
          echo "üöÄ Triggering Bitrise build for $WORKFLOW_NAME"
          
          # Trigger Bitrise build using personal access token
          RESPONSE=$(curl -X POST "https://api.bitrise.io/v0.1/apps/${BITRISE_APP_ID}/builds" \
            -H "Authorization: token ${BITRISE_ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{
              \"hook_info\": {
                \"type\": \"bitrise\"
              },
              \"build_params\": {
                \"branch\": \"${BRANCH_NAME}\",
                \"workflow_id\": \"${WORKFLOW_NAME}\",
                \"environments\": [
                  {
                    \"mapped_to\": \"RELEASE_VERSION\",
                    \"value\": \"${VERSION}\",
                    \"is_expand\": true
                  },
                  {
                    \"mapped_to\": \"TRIGGERED_BY\",
                    \"value\": \"GitHub Actions - ${{ github.actor }}\",
                    \"is_expand\": true
                  }
                ],
                \"commit_message\": \"Build ${VERSION} - ${{ matrix.app }} (${{ matrix.platform }}/${{ matrix.environment }})\"
              }
            }")
          
          # Extract build URL, status, and build number
          BUILD_URL=$(echo "$RESPONSE" | jq -r '.build_url // empty')
          BUILD_SLUG=$(echo "$RESPONSE" | jq -r '.build_slug // empty')
          BUILD_NUMBER=$(echo "$RESPONSE" | jq -r '.build_number // empty')
          STATUS=$(echo "$RESPONSE" | jq -r '.status // empty')
          
          if [ -z "$BUILD_URL" ] || [ "$STATUS" == "error" ]; then
            echo "‚ùå Failed to trigger Bitrise build"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          echo "‚úÖ Bitrise build triggered successfully"
          echo "Build URL: $BUILD_URL"
          echo "Build Slug: $BUILD_SLUG"
          echo "Build Number: $BUILD_NUMBER"
          
          echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT
          echo "build_slug=$BUILD_SLUG" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
      
      - name: Wait for Bitrise build to start
        run: |
          echo "‚è≥ Waiting for Bitrise build to start..."
          sleep 10
          
          # Optionally check build status
          BUILD_SLUG="${{ steps.trigger-bitrise.outputs.build_slug }}"
          
          if [ -n "$BUILD_SLUG" ]; then
            STATUS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.BITRISE_ACCESS_TOKEN }}" \
              "https://api.bitrise.io/v0.1/apps/${{ secrets.BITRISE_PROJECT_SLUG }}/builds/${BUILD_SLUG}")
            
            BUILD_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.data.status_text // "unknown"')
            echo "Build Status: $BUILD_STATUS"
          fi
      
      - name: Create build summary entry
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ### ${{ matrix.app }} - ${{ matrix.platform }}/${{ matrix.environment }}
          - **Workflow**: \`${{ steps.build-config.outputs.workflow_name }}\`
          - **Branch**: \`${{ steps.build-config.outputs.branch_name }}\`
          - **Bitrise Build**: [View Build](${{ steps.trigger-bitrise.outputs.build_url }})
          - **Status**: ‚úÖ Triggered
          
          EOF
  
  update-release:
    needs: [determine-build-parameters, build-apps]
    runs-on: ubuntu-latest
    if: needs.determine-build-parameters.outputs.release_exists == 'true'
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Update release with build status
        run: |
          VERSION="${{ needs.determine-build-parameters.outputs.version }}"
          APPS='${{ needs.determine-build-parameters.outputs.apps }}'
          
          echo "üìù Updating release $VERSION with build information"
          
          # Get current release notes
          gh release view "$VERSION" --json body -q .body > current_notes.md
          
          # Create updated notes with build status
          cat > updated_notes.md << EOF
          $(grep -B 1000 "## üì¶ Build Status" current_notes.md | head -n -2 || cat current_notes.md)
          
          ## üì¶ Build Status
          
          ‚úÖ **Bitrise builds triggered** at $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### Triggered Builds:
          EOF
          
          echo '```' >> updated_notes.md
          echo "$APPS" | jq -r '.[]' | while read app; do
            APP_LOWER=$(echo "$app" | tr '[:upper:]' '[:lower:]' | tr -d '.')
            echo "‚úì $app" >> updated_notes.md
            echo "  - ${APP_LOWER}-android-staging" >> updated_notes.md
            echo "  - ${APP_LOWER}-android-production" >> updated_notes.md
            echo "  - ${APP_LOWER}-ios-staging" >> updated_notes.md
            echo "  - ${APP_LOWER}-ios-production" >> updated_notes.md
          done
          echo '```' >> updated_notes.md
          
          cat >> updated_notes.md << EOF
          
          **Build Details:**
          - Build Workflow: [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Release Branch: \`release/$VERSION\`
          - Triggered by: @${{ github.actor }}
          - Total Builds: $(echo "$APPS" | jq -r '. | length * 4') (4 per app: android/ios √ó staging/production)
          
          > **Note**: Check Bitrise for individual build statuses and artifacts.
          
          EOF
          
          # Add the rest of the original notes if there's content after Build Status
          if grep -A 1000 "## üì¶ Build Status" current_notes.md | tail -n +3 | grep -q "^---"; then
            echo "" >> updated_notes.md
            grep -A 1000 "^---" current_notes.md >> updated_notes.md
          else
            echo "---" >> updated_notes.md
            echo "*This release was automatically generated by GitHub Actions*" >> updated_notes.md
          fi
          
          # Update the release
          gh release edit "$VERSION" --notes-file updated_notes.md
          
          echo "‚úÖ Release $VERSION updated with Bitrise build status"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  summary:
    needs: [determine-build-parameters, build-apps]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Create job summary
        run: |
          VERSION="${{ needs.determine-build-parameters.outputs.version }}"
          APPS='${{ needs.determine-build-parameters.outputs.apps }}'
          RELEASE_EXISTS="${{ needs.determine-build-parameters.outputs.release_exists }}"
          
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          # üöÄ Bitrise Build Summary
          
          ## üìã Build Information
          
          | Field | Value |
          |-------|-------|
          | **Version** | \`$VERSION\` |
          | **Release Branch** | \`release/$VERSION\` |
          | **Version Source** | ${{ github.event.inputs.version_source }} |
          | **Release Exists** | $([ "$RELEASE_EXISTS" == "true" ] && echo "‚úÖ Yes" || echo "‚ö†Ô∏è No") |
          | **App Selection** | ${{ github.event.inputs.app_selection }} |
          | **Triggered by** | @${{ github.actor }} |
          | **Workflow Run** | #${{ github.run_number }} |
          
          ## üì¶ Bitrise Workflows Triggered
          
          | App | Platform | Environment | Workflow | Status |
          |-----|----------|-------------|----------|--------|
          EOF
          
          echo "$APPS" | jq -r '.[]' | while read app; do
            APP_LOWER=$(echo "$app" | tr '[:upper:]' '[:lower:]' | tr -d '.')
            for platform in android ios; do
              for env in staging production; do
                echo "| $app | $platform | $env | ${APP_LOWER}-${platform}-${env} | ‚úÖ Triggered |" >> $GITHUB_STEP_SUMMARY
              done
            done
          done
          
          # Calculate total builds
          TOTAL_APPS=$(echo "$APPS" | jq -r '. | length')
          TOTAL_BUILDS=$((TOTAL_APPS * 4))
          
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          
          ## üìä Summary
          
          - **Total Apps**: $TOTAL_APPS
          - **Builds per App**: 4 (2 platforms √ó 2 environments)
          - **Total Builds Triggered**: $TOTAL_BUILDS
          
          ## üîó Links
          
          EOF
          
          if [ "$RELEASE_EXISTS" == "true" ]; then
            echo "- [View Release](https://github.com/${{ github.repository }}/releases/tag/$VERSION)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è No release found for version $VERSION" >> $GITHUB_STEP_SUMMARY
            echo "- [Create Release](https://github.com/${{ github.repository }}/actions/workflows/create-release-version.yml)" >> $GITHUB_STEP_SUMMARY
          fi
          
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          - [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Bitrise Dashboard](https://app.bitrise.io/dashboard)
          
          ## ‚ö†Ô∏è Important Notes
          
          1. **Check Bitrise** for individual build statuses and download artifacts
          2. **Release Branch**: All builds are from \`release/$VERSION\`
          3. **Workflow Naming**: Follows pattern \`{app}-{platform}-{environment}\`
          
          ---
          *Builds triggered at $(date -u +"%Y-%m-%d %H:%M:%S UTC")*
          EOF